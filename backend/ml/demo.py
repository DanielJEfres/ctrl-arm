#!/usr/bin/env python3
"""
Ctrl-ARM Demo Script
Demonstrates the enhanced EMG + IMU control system
"""

import time
import sys
from pathlib import Path

def print_banner():
    """Print the demo banner"""
    print("\n" + "="*70)
    print(" "*25 + "CTRL-ARM DEMO")
    print("="*70)
    print()
    print("üéÆ Enhanced Muscle + Movement Control Demo")
    print("   Combining EMG gestures with IMU cursor control")
    print()

def print_features():
    """Print feature overview"""
    print("‚ú® Features Demonstrated:")
    print()
    print("ü¶æ EMG Gesture Control:")
    print("   ‚Ä¢ Left bicep flex     ‚Üí Left click")
    print("   ‚Ä¢ Right bicep flex    ‚Üí Right click") 
    print("   ‚Ä¢ Both biceps flex    ‚Üí Double click")
    print("   ‚Ä¢ Strong left flex    ‚Üí Scroll up")
    print("   ‚Ä¢ Strong right flex   ‚Üí Scroll down")
    print("   ‚Ä¢ Both strong flex    ‚Üí Middle click")
    print()
    print("üéØ IMU Cursor Control:")
    print("   ‚Ä¢ Lean forward        ‚Üí Move cursor up")
    print("   ‚Ä¢ Lean backward       ‚Üí Move cursor down")
    print("   ‚Ä¢ Lean left           ‚Üí Move cursor left")
    print("   ‚Ä¢ Lean right          ‚Üí Move cursor right")
    print()
    print("üß† AI Features:")
    print("   ‚Ä¢ Decision tree ML model (89.87% accuracy)")
    print("   ‚Ä¢ Personalized calibration")
    print("   ‚Ä¢ Real-time processing (200Hz)")
    print("   ‚Ä¢ Smooth cursor movement (60 FPS)")
    print()

def print_requirements():
    """Print hardware requirements"""
    print("üîß Hardware Requirements:")
    print()
    print("Required:")
    print("   ‚Ä¢ MyoWare EMG sensors (2x)")
    print("   ‚Ä¢ Seeed Studio XIAO Sense board")
    print("   ‚Ä¢ USB cable")
    print("   ‚Ä¢ Computer with Python 3.7+")
    print()
    print("Setup:")
    print("   ‚Ä¢ Attach EMG sensors to biceps")
    print("   ‚Ä¢ Mount XIAO Sense on chest (IMU for cursor)")
    print("   ‚Ä¢ Connect via USB")
    print()

def print_usage():
    """Print usage instructions"""
    print("üöÄ How to Run:")
    print()
    print("1. Basic Demo (EMG only):")
    print("   python emg_control.py")
    print()
    print("2. Enhanced Demo (EMG + IMU):")
    print("   python enhanced_emg_control.py")
    print()
    print("3. Cursor Test Only:")
    print("   python test_cursor_control.py")
    print()
    print("4. Interactive Launcher:")
    print("   python launcher.py")
    print()

def print_tips():
    """Print usage tips"""
    print("üí° Tips for Best Results:")
    print()
    print("EMG Gestures:")
    print("   ‚Ä¢ Keep muscles relaxed during calibration")
    print("   ‚Ä¢ Use consistent flex strength")
    print("   ‚Ä¢ Record 20-30 examples per gesture")
    print("   ‚Ä¢ Recalibrate if accuracy drops")
    print()
    print("Cursor Control:")
    print("   ‚Ä¢ Sit in neutral position during IMU calibration")
    print("   ‚Ä¢ Mount XIAO Sense securely on chest")
    print("   ‚Ä¢ Start with low sensitivity, adjust as needed")
    print("   ‚Ä¢ Use smooth, deliberate movements")
    print()

def print_troubleshooting():
    """Print troubleshooting tips"""
    print("üîß Troubleshooting:")
    print()
    print("No Device Found:")
    print("   ‚Ä¢ Check USB connection")
    print("   ‚Ä¢ Verify XIAO Sense is powered")
    print("   ‚Ä¢ Try different USB port")
    print()
    print("Poor Gesture Recognition:")
    print("   ‚Ä¢ Recalibrate EMG sensors")
    print("   ‚Ä¢ Check sensor placement")
    print("   ‚Ä¢ Record more training data")
    print()
    print("Cursor Issues:")
    print("   ‚Ä¢ Recalibrate IMU")
    print("   ‚Ä¢ Adjust sensitivity in config")
    print("   ‚Ä¢ Check mounting position")
    print()

def main():
    """Main demo function"""
    print_banner()
    
    while True:
        print("Choose what you'd like to see:")
        print()
        print("1. Feature Overview")
        print("2. Hardware Requirements")
        print("3. Usage Instructions")
        print("4. Tips for Best Results")
        print("5. Troubleshooting")
        print("6. Run Enhanced Demo")
        print("7. Run Cursor Test")
        print("8. Exit")
        print()
        
        try:
            choice = input("Enter your choice (1-8): ").strip()
            print()
            
            if choice == "1":
                print_features()
            elif choice == "2":
                print_requirements()
            elif choice == "3":
                print_usage()
            elif choice == "4":
                print_tips()
            elif choice == "5":
                print_troubleshooting()
            elif choice == "6":
                print("üöÄ Starting Enhanced Demo...")
                print("Press Ctrl+C to stop the demo")
                print()
                try:
                    from enhanced_emg_control import EnhancedEMGController
                    controller = EnhancedEMGController()
                    controller.run()
                except KeyboardInterrupt:
                    print("\nüõë Demo stopped by user")
                except Exception as e:
                    print(f"‚ùå Error running demo: {e}")
            elif choice == "7":
                print("üéØ Starting Cursor Test...")
                print("Press Ctrl+C to stop the test")
                print()
                try:
                    from test_cursor_control import CursorControlTester
                    tester = CursorControlTester()
                    tester.run_test()
                except KeyboardInterrupt:
                    print("\nüõë Test stopped by user")
                except Exception as e:
                    print(f"‚ùå Error running test: {e}")
            elif choice == "8":
                print("üëã Thanks for trying Ctrl-ARM!")
                print("Visit our GitHub for more information:")
                print("https://github.com/yourusername/ctrl-arm")
                break
            else:
                print("‚ùå Invalid choice. Please enter 1-8.")
            
            print("\n" + "-"*70)
            input("Press Enter to continue...")
            print()
            
        except KeyboardInterrupt:
            print("\n\nüëã Demo ended. Thanks for trying Ctrl-ARM!")
            break
        except Exception as e:
            print(f"\n‚ùå Error: {e}")
            break

if __name__ == "__main__":
    main()
